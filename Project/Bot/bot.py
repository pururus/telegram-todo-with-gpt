from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from pathlib import Path

search_directory = Path('../')
for file_path in search_directory.rglob("Project"):
    project = file_path.resolve()

import sys
sys.path.append('project')

from Project.Todoist.Todoist_module import TodoistModule
from Project.Database.Database import ClientsDB, Errors
from Project.Calendar.Calendar_module import CalendarModule
from Project.GPT.GPT_module import GPT
from Project.Request import RequestType
from Project.Query import Query
from Project.GPT.credentials import cal_credentials

API_TOKEN = '8149845915:AAEoY53NSKqO5QntlTI6fwz4x-0j70e1X3o'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

db = ClientsDB("client_DB")
calendar = CalendarModule()
gpt_parser = GPT()

class RegistrationStates(StatesGroup):
    waiting_for_google_calendar_id = State()
    waiting_for_todoist_token = State()

class UserStates(StatesGroup):
    waiting_for_event = State()
    waiting_for_task = State()

class UpdateStates(StatesGroup):
    waiting_for_new_calendar_id = State()
    waiting_for_new_todoist_token = State()

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
                types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            ],
            [
                types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    telegram_id = str(message.from_user.id)
    calendar_id = db.get_calendar_id(telegram_id)

    if calendar_id:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Google Calendar ID. "
            "–¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: "
            "to-do-with-gpt-project@to-do-443214.iam.gserviceaccount.com"
        )
        await state.set_state(RegistrationStates.waiting_for_google_calendar_id)

@dp.message(RegistrationStates.waiting_for_google_calendar_id)
async def process_google_calendar_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ Google Calendar ID."""
    google_calendar_id = message.text.strip()
    await state.update_data(google_calendar_id=google_calendar_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Todoist API —Ç–æ–∫–µ–Ω.")
    await state.set_state(RegistrationStates.waiting_for_todoist_token)

@dp.message(RegistrationStates.waiting_for_todoist_token)
async def process_todoist_token(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Todoist."""
    todoist_token = message.text.strip()
    telegram_id = str(message.from_user.id)
    data = await state.get_data()
    google_calendar_id = data.get('google_calendar_id')

    result = db.add_client(telegram_id, google_calendar_id, todoist_token)
    if result == Errors.INTEGRITY_ERROR.value:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu_keyboard())
    elif isinstance(result, Exception):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    await state.clear()

@dp.message(Command("update_calendar"))
async def update_calendar_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /update_calendar –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Google Calendar ID."""
    telegram_id = str(message.from_user.id)
    if not db.get_calendar_id(telegram_id):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π Google Calendar ID:")
    await state.set_state(RegistrationStates.waiting_for_google_calendar_id)

@dp.message(RegistrationStates.waiting_for_google_calendar_id)
async def process_updated_google_calendar_id(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π Google Calendar ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    new_calendar_id = message.text.strip()
    telegram_id = str(message.from_user.id)
    if db.update_calendar_id(telegram_id, new_calendar_id):
        await message.answer("Google Calendar ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

@dp.message(Command("update_todoist"))
async def update_todoist_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /update_todoist –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Todoist API —Ç–æ–∫–µ–Ω–∞."""
    telegram_id = str(message.from_user.id)
    if not db.get_todoist_token(telegram_id):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω:")
    await state.set_state(RegistrationStates.waiting_for_todoist_token)

@dp.message(RegistrationStates.waiting_for_todoist_token)
async def process_updated_todoist_token(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    new_todoist_token = message.text.strip()
    telegram_id = str(message.from_user.id)
    if db.update_todoist_token(telegram_id, new_todoist_token):
        await message.answer("Todoist API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
async def show_bot_commands(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    """
    commands_list = (
        "üìò **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è \n"
        "/unreg - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é :(\n"
        "/update\\_calendar - –æ–±–Ω–æ–≤–∏—Ç—å Google Calendar ID\n"
        "/update\\_todoist - –æ–±–Ω–æ–≤–∏—Ç—å Todoist API —Ç–æ–∫–µ–Ω\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Todoist\n\n"
        "–¢–∞–∫–∏–µ –¥–µ–ª–∞. üìñ"
    )
    await message.answer(commands_list, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Calendar ID
@dp.message(Command("update_calendar"))
async def update_calendar_handler(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Calendar ID.
    """
    telegram_id = str(message.from_user.id)
    calendar_id = db.get_calendar_id(telegram_id)

    if not calendar_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π Google Calendar ID.")
    await state.set_state(UpdateStates.waiting_for_new_calendar_id)

@dp.message(UpdateStates.waiting_for_new_calendar_id)
async def process_new_calendar_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π Google Calendar ID –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    new_calendar_id = message.text.strip()
    telegram_id = str(message.from_user.id)

    result = db.update_calendar_id(telegram_id, new_calendar_id)
    if result:
        await message.answer("–í–∞—à Google Calendar ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Calendar ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Todoist API —Ç–æ–∫–µ–Ω–∞
@dp.message(Command("update_todoist"))
async def update_todoist_handler(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Todoist API —Ç–æ–∫–µ–Ω–∞.
    """
    telegram_id = str(message.from_user.id)
    todoist_token = db.get_todoist_token(telegram_id)

    if not todoist_token:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω.")
    await state.set_state(UpdateStates.waiting_for_new_todoist_token)

@dp.message(UpdateStates.waiting_for_new_todoist_token)
async def process_new_todoist_token(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    new_todoist_token = message.text.strip()
    telegram_id = str(message.from_user.id)

    result = db.update_todoist_token(telegram_id, new_todoist_token)
    if result:
        await message.answer("–í–∞—à Todoist API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Todoist API —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


@dp.message()
async def handle_user_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = str(message.from_user.id)
    calendar_id = db.get_calendar_id(telegram_id)
    todoist_token = db.get_todoist_token(telegram_id)

    if not calendar_id or not todoist_token:
        await message.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.")
        await state.set_state(UserStates.waiting_for_event)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.")
        await state.set_state(UserStates.waiting_for_task)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))
