from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from aiogram.types import FSInputFile
from datetime import datetime
import logging

"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ INFO, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
"""
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from pathlib import Path

search_directory = Path('../')
for file_path in search_directory.rglob("Project"):
    project = file_path.resolve()

import sys
sys.path.append('project')

from Project.Todoist.Todoist_module import TodoistModule
from Project.Database.Database import ClientsDB, Errors
from Project.Calendar.Calendar_module import CalendarModule
from Project.GPT.GPT_module import GPT
from Project.Request import RequestType
from Project.Query import Query
from Project.GPT.credentials import cal_credentials

API_TOKEN = '8149845915:AAEoY53NSKqO5QntlTI6fwz4x-0j70e1X3o'

"""
–°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
- Bot: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
- Dispatcher: –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
"""
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, CalendarModule –∏ GPT:
- db: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (sqlite3)
- calendar: –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Calendar
- gpt_parser: –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT
"""
db = ClientsDB("client_DB")
calendar = CalendarModule()
gpt_parser = GPT()

"""
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π:
- RegistrationStates: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- UserStates: —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–¥–∞—á–∏.
- UpdateStates: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (Calendar ID, Todoist —Ç–æ–∫–µ–Ω).
"""
class RegistrationStates(StatesGroup):
    waiting_for_google_calendar_id = State()
    waiting_for_todoist_token = State()

class UserStates(StatesGroup):
    waiting_for_event = State()
    waiting_for_task = State()

class UpdateStates(StatesGroup):
    waiting_for_new_calendar_id = State()
    waiting_for_new_todoist_token = State()

def get_main_menu_keyboard():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Returns:
        types.ReplyKeyboardMarkup: –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
        - "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
        - "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
    """
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
                types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –õ–æ–≥–∏–∫–∞:
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ –ë–î (get_calendar_id).
    2) –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    3) –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Calendar –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è Google Calendar ID.
    """
    telegram_id = str(message.from_user.id)

    calendar_id_row = db.get_calendar_id(telegram_id)
    calendar_id = calendar_id_row[0] if calendar_id_row else None

    if calendar_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu_keyboard())
    else:
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —Ñ–æ—Ç–æ –ø–æ Google Calendar
        calendar_image = FSInputFile("google_png.png")
        await message.answer_photo(
            photo=calendar_image,
            caption=(
                "üê† Hello and Welcome! üêü\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                "üê† –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar üê†\n\n"
                "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n"
                "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è.\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
                "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n"
                "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n"
                "5Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n"
                "   to-do-with-gpt-project@to-do-443214.iam.gserviceaccount.com.\n\n"
                "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Google Calendar ID –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            ),
            parse_mode="Markdown"
        )
        await state.set_state(RegistrationStates.waiting_for_google_calendar_id)

@dp.message(Command("info"))
async def info_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –±—ã—Å—Ç—Ä–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
    """
    info_message = (
        "üìò **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è \n"
        "/unreg - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é :(\n"
        "/update_calendar - –æ–±–Ω–æ–≤–∏—Ç—å Google Calendar ID\n"
        "/update_todoist - –æ–±–Ω–æ–≤–∏—Ç—å Todoist API —Ç–æ–∫–µ–Ω\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (Google Calendar ID –∏ Todoist API —Ç–æ–∫–µ–Ω)\n"
        "/info - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Todoist\n\n"
        "–¢–∞–∫–∏–µ –¥–µ–ª–∞. üìñ"
    )
    await message.answer(info_message, parse_mode="Markdown")

@dp.message(RegistrationStates.waiting_for_google_calendar_id)
async def process_google_calendar_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ Google Calendar ID.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è (validate_calendar_id).
    2) –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    3) –ï—Å–ª–∏ –≤–µ—Ä–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É Todoist —Ç–æ–∫–µ–Ω–∞.
    """
    google_calendar_id = message.text.strip()
    telegram_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Calendar ID
    is_valid = calendar.validate_calendar_id(google_calendar_id)
    if not is_valid:
        await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Google Calendar ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Google Calendar ID –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(google_calendar_id=google_calendar_id)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —Ñ–æ—Ç–æ –ø–æ Todoist
    todoist_image = FSInputFile("todoist_png.png")
    await message.answer_photo(
        photo=todoist_image,
        caption=(
            "üê†**–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Todoist API —Ç–æ–∫–µ–Ω–∞**üê≥\n\n"
            "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n"
            "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ Todoist –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** –∏–ª–∏ **API —Ç–æ–∫–µ–Ω—ã**.\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª **Developer**.\n"
            "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à **API —Ç–æ–∫–µ–Ω**.\n\n"
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π **Todoist API —Ç–æ–∫–µ–Ω** –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        ),
        parse_mode="Markdown"
    )
    await state.set_state(RegistrationStates.waiting_for_todoist_token)

@dp.message(RegistrationStates.waiting_for_todoist_token)
async def process_todoist_token(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Todoist.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Todoist —Ç–æ–∫–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–º validate_token().
    2) –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    3) –ï—Å–ª–∏ –≤–µ—Ä–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    """
    todoist_token = message.text.strip()
    telegram_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π Google Calendar ID
    data = await state.get_data()
    google_calendar_id = data.get('google_calendar_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Todoist —Ç–æ–∫–µ–Ω–∞
    todoist_module = TodoistModule(todoist_token)
    if not todoist_module.validate_token():
        await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Todoist —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    result = db.add_client(telegram_id, google_calendar_id, todoist_token)
    if result == Errors.INTEGRITY_ERROR.value:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu_keyboard())
    elif isinstance(result, Exception):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    await state.clear()

@dp.message(Command("unreg"))
async def unreg_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /unreg –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    1) –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –ë–î.
    2) –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    telegram_id = str(message.from_user.id)

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = db.conn.cursor()
    cursor.execute('DELETE FROM t_client WHERE telegram_id = ?', (telegram_id,))
    db.conn.commit()
    cursor.close()

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

@dp.message(Command("status"))
async def status_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    1) –ü–æ–ª—É—á–∞–µ—Ç Google Calendar ID –∏ Todoist token –∏–∑ –ë–î.
    2) –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    3) –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    telegram_id = str(message.from_user.id)

    calendar_id = db.get_calendar_id(telegram_id)
    todoist_token = db.get_todoist_token(telegram_id)

    if not calendar_id or not todoist_token:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    status_message = (
        f"üìã **–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** üìã\n\n"
        f"üîπ **Google Calendar ID**: '{calendar_id}'\n"
        f"üîπ **Todoist API —Ç–æ–∫–µ–Ω**: '{todoist_token}'\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_calendar –¥–ª—è Google Calendar.\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_todoist –¥–ª—è Todoist API —Ç–æ–∫–µ–Ω–∞."
    )
    await message.answer(status_message, parse_mode="Markdown")

@dp.message(Command("update_calendar"))
async def update_calendar_handler(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Calendar ID –ø–æ –∫–æ–º–∞–Ω–¥–µ /update_calendar.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
    2) –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å–∏—Ç /start.
    3) –ï—Å–ª–∏ –¥–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Calendar ID.
    """
    telegram_id = str(message.from_user.id)
    calendar_id = db.get_calendar_id(telegram_id)

    if not calendar_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π Google Calendar ID.")
    await state.set_state(UpdateStates.waiting_for_new_calendar_id)

@dp.message(UpdateStates.waiting_for_new_calendar_id)
async def process_new_calendar_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π Google Calendar ID –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /update_calendar.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID (validate_calendar_id).
    2) –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏.
    3) –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤ –ë–î.
    """
    new_calendar_id = message.text.strip()
    telegram_id = str(message.from_user.id)

    if not calendar.validate_calendar_id(new_calendar_id):
        await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Google Calendar ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    result = db.update_calendar_id(telegram_id, new_calendar_id)
    if result:
        await message.answer("–í–∞—à Google Calendar ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Calendar ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

@dp.message(Command("update_todoist"))
async def update_todoist_handler(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Todoist API —Ç–æ–∫–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /update_todoist.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω –≤ –ë–î.
    2) –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å–∏—Ç /start.
    3) –ò–Ω–∞—á–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
    """
    telegram_id = str(message.from_user.id)
    todoist_token = db.get_todoist_token(telegram_id)

    if not todoist_token:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω.")
    await state.set_state(UpdateStates.waiting_for_new_todoist_token)

@dp.message(UpdateStates.waiting_for_new_todoist_token)
async def process_new_todoist_token(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π Todoist API —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /update_todoist.

    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–º validate_token().
    2) –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏.
    3) –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î.
    """
    new_todoist_token = message.text.strip()
    telegram_id = str(message.from_user.id)

    todoist_module = TodoistModule(new_todoist_token)
    if not todoist_module.validate_token():
        await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Todoist —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    result = db.update_todoist_token(telegram_id, new_todoist_token)
    if result:
        await message.answer("–í–∞—à Todoist API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Todoist API —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def handle_add_event(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ".

    1) –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    2) –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏ (waiting_for_event).
    """
    await state.clear()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.")
    await state.set_state(UserStates.waiting_for_event)

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def handle_add_task(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É".

    1) –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    2) –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ (waiting_for_task).
    """
    await state.clear()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.")
    await state.set_state(UserStates.waiting_for_task)

@dp.message()
async def handle_user_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –õ–æ–≥–∏–∫–∞:
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å—Ç—å –ª–∏ Calendar ID –∏ Todoist —Ç–æ–∫–µ–Ω).
    2) –°–º–æ—Ç—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ç.—á. waiting_for_event, waiting_for_task).
    3) –ï—Å–ª–∏ waiting_for_event: –ø–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ, —Å–æ–∑–¥–∞—ë–º –≤ Google Calendar.
    4) –ï—Å–ª–∏ waiting_for_task: –ø–∞—Ä—Å–∏–º –∑–∞–¥–∞—á—É, —Å–æ–∑–¥–∞—ë–º –≤ Todoist.
    5) –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    6) –í—Å—ë –æ–±—ë—Ä–Ω—É—Ç–æ –≤ try-except –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.
    """
    try:
        telegram_id = str(message.from_user.id)

        calendar_id = db.get_calendar_id(telegram_id)
        todoist_token = db.get_todoist_token(telegram_id)

        if not calendar_id or not todoist_token:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        current_state = await state.get_state()
        user_input = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if len(user_input) <= 1:
            await message.answer("–¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π")
            return

        if current_state == UserStates.waiting_for_event.state:
            content = Query(
                client_id=telegram_id,
                current_time=datetime.now(),
                content=message.text.strip()
            )
            parsed_request = gpt_parser.parse_message(content)
            logger.info(f"Parsed request: {parsed_request}")

            if parsed_request and parsed_request.type == RequestType.EVENT:
                response = calendar.create_event(parsed_request, calendar_id)
                if response is None:
                    await message.answer(f"–°–æ–±—ã—Ç–∏–µ '{parsed_request.body}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar.")
                else:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar. –û—à–∏–±–∫–∞: {response}")

                await state.clear()
                await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu_keyboard())
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –µ—â—ë —Ä–∞–∑.")

        elif current_state == UserStates.waiting_for_task.state:
            content = Query(
                client_id=telegram_id,
                current_time=datetime.now(),
                content=message.text.strip()
            )
            parsed_request = gpt_parser.parse_message(content)
            logger.info(f"Parsed task: {parsed_request}")

            if parsed_request and parsed_request.type == RequestType.GOAL:
                todoist_module = TodoistModule(todoist_token)
                response = todoist_module.create_task(parsed_request)
                if response is None:
                    await message.answer(f"–ó–∞–¥–∞—á–∞ '{parsed_request.body}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Todoist.")
                else:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Todoist. –û—à–∏–±–∫–∞: {response}")

                await state.clear()
                await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu_keyboard())
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –µ—â—ë —Ä–∞–∑.")

        else:
            if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.")
                await state.set_state(UserStates.waiting_for_event)
            elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.")
                await state.set_state(UserStates.waiting_for_task)
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(dp.start_polling(bot))